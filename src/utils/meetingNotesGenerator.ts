import { Message } from '@/contexts/MessageContext';
import axios from 'axios';

// OpenAI API configuration (same as in openai.ts)
const OPENAI_API_KEY = import.meta.env.VITE_OPENAI_API_KEY || '';
const OPENAI_API_URL = 'https://api.openai.com/v1/chat/completions';

/**
 * Generates meeting notes from a collection of messages
 * @param messages Array of messages to generate notes from
 * @param channelName Name of the channel or thread
 * @returns Formatted meeting notes as a string
 */
export const generateMeetingNotes = async (messages: Message[], channelName: string): Promise<string> => {
  // Skip if no messages
  if (!messages || messages.length === 0) {
    return 'No messages found to generate meeting notes.';
  }

  // Get the date range
  const timestamps = messages.map(msg => msg.timestamp);
  const startDate = new Date(Math.min(...timestamps.map(t => t.getTime())));
  const endDate = new Date(Math.max(...timestamps.map(t => t.getTime())));
  
  // Format dates
  const formatDate = (date: Date) => {
    return date.toLocaleString('en-US', {
      year: 'numeric', 
      month: 'short', 
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  // Get unique participants
  const participants = Array.from(new Set(messages.map(msg => msg.username))).join(', ');
  
  // Generate notes header
  let notes = `# Meeting Notes: ${channelName}\n\n`;
  notes += `**Date:** ${formatDate(startDate)} - ${formatDate(endDate)}\n`;
  notes += `**Participants:** ${participants}\n\n`;
  
  try {
    // Add AI-generated summary section using OpenAI
    notes += `## Summary\n\n`;
    const summary = await generateAISummary(messages, channelName);
    notes += summary;
    
    // Add key points section
    notes += `\n\n## Key Points\n\n`;
    
    // Group messages by user and create bullet points
    const userMessages: Record<string, string[]> = {};
    
    messages.forEach(msg => {
      if (!userMessages[msg.username]) {
        userMessages[msg.username] = [];
      }
      userMessages[msg.username].push(msg.content);
    });
    
    // Add user contributions
    Object.entries(userMessages).forEach(([username, contents]) => {
      notes += `### ${username}\n`;
      contents.forEach(content => {
        notes += `- ${content}\n`;
      });
      notes += '\n';
    });
    
    // Add AI-generated action items section using OpenAI
    notes += `## Action Items\n\n`;
    const actionItems = await extractActionItems(messages);
    notes += actionItems;
    
    // Add AI-generated next steps using OpenAI
    notes += `\n\n## Next Steps\n\n`;
    const nextSteps = await generateNextSteps(messages, channelName);
    notes += nextSteps;
  } catch (error) {
    console.error('Error generating AI-enhanced meeting notes:', error);
    
    // Fallback to basic notes if OpenAI fails
    notes += `## Summary\n\n`;
    notes += `This meeting covered discussions in the ${channelName} channel.\n\n`;
    
    notes += `## Action Items\n\n`;
    notes += `- Follow up on discussion points\n`;
    notes += `- Schedule next meeting\n`;
    
    notes += `\n\n## Next Steps\n\n`;
    notes += `Review these notes and continue the discussion in the ${channelName} channel.\n`;
  }
  
  notes += `\n\n---\n`;
  notes += `Generated by SlackAI on ${new Date().toLocaleString()}\n`;
  
  return notes;
};

/**
 * Generate an AI summary of the meeting using OpenAI
 */
const generateAISummary = async (messages: Message[], channelName: string): Promise<string> => {
  if (!OPENAI_API_KEY) {
    throw new Error('OpenAI API key is missing');
  }
  
  // Format messages for the prompt
  const formattedMessages = messages
    .map(msg => `${msg.username}: ${msg.content}`)
    .join('\n');
  
  const prompt = `
You are an AI assistant tasked with summarizing a conversation from a Slack-like chat channel named "${channelName}".

Here is the conversation:
${formattedMessages}

Please provide a concise but comprehensive summary of this conversation. Focus on:
1. The main topics discussed
2. Key decisions made or conclusions reached
3. Important information shared
4. The overall purpose of the conversation

Your summary should be 2-3 paragraphs long and written in a professional tone.
`;

  // Call OpenAI API
  const response = await axios.post(
    OPENAI_API_URL,
    {
      model: 'gpt-4o',
      messages: [{ role: 'user', content: prompt }],
      max_tokens: 500,
      temperature: 0.7,
    },
    {
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${OPENAI_API_KEY}`,
      },
    }
  );

  return response.data.choices[0].message.content.trim();
};

/**
 * Extract action items from messages using OpenAI
 */
const extractActionItems = async (messages: Message[]): Promise<string> => {
  if (!OPENAI_API_KEY) {
    throw new Error('OpenAI API key is missing');
  }
  
  // Format messages for the prompt
  const formattedMessages = messages
    .map(msg => `${msg.username}: ${msg.content}`)
    .join('\n');
  
  const prompt = `
You are an AI assistant tasked with extracting action items from a conversation in a Slack-like chat.

Here is the conversation:
${formattedMessages}

Please identify all action items mentioned in this conversation. An action item is a task that someone needs to complete.
For each action item:
1. Describe the task clearly
2. Mention who is responsible (if specified)
3. Include any deadlines mentioned

Format each action item as a bullet point starting with "- " and include the person responsible in parentheses if known.
If no clear action items are mentioned, create 3-5 logical action items based on the conversation content.
`;

  // Call OpenAI API
  const response = await axios.post(
    OPENAI_API_URL,
    {
      model: 'gpt-4o',
      messages: [{ role: 'user', content: prompt }],
      max_tokens: 500,
      temperature: 0.7,
    },
    {
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${OPENAI_API_KEY}`,
      },
    }
  );

  return response.data.choices[0].message.content.trim();
};

/**
 * Generate next steps based on the meeting using OpenAI
 */
const generateNextSteps = async (messages: Message[], channelName: string): Promise<string> => {
  if (!OPENAI_API_KEY) {
    throw new Error('OpenAI API key is missing');
  }
  
  // Format messages for the prompt
  const formattedMessages = messages
    .map(msg => `${msg.username}: ${msg.content}`)
    .join('\n');
  
  const prompt = `
You are an AI assistant tasked with suggesting next steps after a conversation in a Slack-like chat channel named "${channelName}".

Here is the conversation:
${formattedMessages}

Based on this conversation, please suggest 4-6 clear next steps that the team should take.
Format your response as a numbered list (1., 2., etc.) with each step being a complete sentence.
Focus on practical, actionable steps that will move the discussion forward or help achieve the goals mentioned.
`;

  // Call OpenAI API
  const response = await axios.post(
    OPENAI_API_URL,
    {
      model: 'gpt-4o',
      messages: [{ role: 'user', content: prompt }],
      max_tokens: 500,
      temperature: 0.7,
    },
    {
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${OPENAI_API_KEY}`,
      },
    }
  );

  return response.data.choices[0].message.content.trim();
};

/**
 * Downloads meeting notes as a text file
 * @param messages Array of messages to generate notes from
 * @param channelName Name of the channel or thread
 */
export const downloadMeetingNotes = async (messages: Message[], channelName: string): Promise<void> => {
  const notes = await generateMeetingNotes(messages, channelName);
  
  // Create a safe filename from the channel name
  const safeChannelName = channelName.replace(/[^a-z0-9]/gi, '_').toLowerCase();
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
  const filename = `${safeChannelName}_meeting_notes_${timestamp}.txt`;
  
  // Create a blob and download link
  const blob = new Blob([notes], { type: 'text/plain' });
  const url = URL.createObjectURL(blob);
  const link = document.createElement('a');
  
  link.href = url;
  link.download = filename;
  document.body.appendChild(link);
  link.click();
  
  // Clean up
  setTimeout(() => {
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  }, 100);
};
